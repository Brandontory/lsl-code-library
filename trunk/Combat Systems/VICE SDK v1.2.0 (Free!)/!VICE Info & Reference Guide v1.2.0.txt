VICE Scripting Guide v1.2.0
by Creem Pye, 4/2/09


0 ==================== About this document

This guide is intended for creators of weapons and vehicles who would like to add VICE support.  After reading this document carefully, you should be able to take advantage of VICE's featureset.  This document is divided into the following sections:

1: Overview and quickstart
2: Main VICE  link message format (most central to the combat experience)
3: Bullet-related link messages
4: Bomb-related link messages
5: TCS-related link messages
6: Messages for observor (scoreboard etc.)  script
7: Target script link messages
8: Changelog

*NOTICE*: 
This guide can be found with better formatting at http://vicecombat.com
If you have access to a web browser, I highly recommend you use that version instead of this notecard.

1 ==================== Overview and quickstart

NOTICE: VICE is a constantly evolving and improving combat system.  It works very well with everything we've tested so far, but  as more people use VICE in different products, it's likely that we will discover bugs.  Minor bugs will be addressed in minor updates (like v1.0.0 -> v1.0.1), but more major bugs/exploits will be addressed in more major version updates (like v1.0 -> v1.1), and will result in incompatibilities between the 2 versions.  We plan to keep the scripting interface as uniform as possible between releases, so usually you'll only need to replace the VICE scripts with the newer version.  If you plan to sell VICE-enabled vehicles or weapons at this stage, be prepared to issue updates to your customers (either manually or through some automated update system). 

Your typical VICE vehicle or weapon will have the following components:

* A VICE sensor script, which must be placed in the root prim of the weapon/vehicle
        - As of v1.2.0, unit types with TCS support now have a "VICE+"TCS" sensor script, which integrates both VICE and TCS.  Use this script _instead_ of the VICE-only script if you plan to use TCS

* One or more VICE bullet  rezzer scripts, with accompanying bullet object.  Keep the weapon loadout limits in mind when doing so, or the gun won't work
        - For attachment-based infantry guns, any prim in the linkset will work.  Except for a special case of the SSG, Bullets will always rez at an offset of <1.6,0.0,0.0> relative to the direction the avatar is facing, in the "forward" direction.
        - For non-infantry guns , bullet rezzers should be placed in the guns you want the bullet to emerge from.  For LMG & HMG, bullets will always rez 3.5m in front of the gun, oriented to fire in the local +z direction of the prim they were placed in (this is convenient because it will line up with any "particle bullets" used by TCS and CCC).
        - When you first insert any bullet rezzer kit which include s a slave script, the slave script will rez bullets constantly in the direction of fire.  Do not be alarmed, however- those bullets are not  combat-enabled and cannot hurt other VICE combatants.  To stop this constant rezzing, place the "Disable VICE Bullet Slave script" script into the same prim as your bullet rezzer; it will disable any slave scripts it finds.

* A trigger/control script, created by you, which listens to the end user and controls the VICE scripts through link messages

* Optionally, a bomb rezzer script, configuration notecard, and VICE bombs (can be placed in any prim within 10m of where you'd like to rez the bombs).  Any VICE bomb must contain the "VICE Bomb" script, along with another script to trigger the VICE bomb to explode.  A VICE bomb must have it's object name prefixed with the type of bomb it is; the name must start with "VICE SM Bomb", "VICE MD Bomb", "VICE LG Bomb", or "VICE Torpedo" to be considered a VICE bomb by the bomb rezzer and detonate properly.  IMPORTANT:  be sure to add the VICE Bomb script last, and keep a copy of the bomb in your inventory, because the VICE Bomb script will call llDie() on detonation, or if it's rezzed by an avatar.  The best way to edit a bomb after it becomes VICE enabled is to attach it to your avatar, possibly while your avatar hovers to avoid collision events.

* Optionally, a custom initial HP level for the unit set by the description in the vehicle/weapon's root prim
        - e.g. "vicehp=080" anywhere in the root prim's description will give a vehicle an initial VICE HP of 80
        - This setting is read when the vehicle/weapon is first rezzed
        - A custom HP value must be less than the default value
    
To enable VICE and start shooting stuff, your control or trigger script must send the "seated" message to the linkset, then the "vice ctrl" message to enable VICE.  Then simply send the "gun ctrl" message to the linkset when the gunner starts or stops firing.  If you are confused about unit types, weapon types, or any of the other basic features of VICE, please read the general Readme notecard.  For more detailed information, you must read the other sections of this notecard.


2 ==================== Main VICE link messages

This document lists the link message format the same way that LSL does for incoming link messages, minus the link # that the message arrived from.  Each link message has 3 variables: an integer, a string, and a key.  Like most other scripts in SL, VICE usually separates the message types by the string, and often uses the integer and key to convey other information.  If 0 is shown for the integer field, or "" is shown for the key field, it means that VICE ignores these fields.


* vice_on, "vice ctrl", ""
Sent by the vehicle/weapon's control script to toggle VICE combat on/off.  vice_on=0 disables VICE; any other integer enables vice


* seated,"seated",gunner_key 
Sent by the vehicle/weapon's control script to associate or dissociate an avatar with a vehicle or weapon's combat.  seated=0 dissociates the vehicle/weapon from the current gunner; any other value of seated will associate the vehicle/weapon with an avatar whose UUID is gunner_key


* vice_stats,"vice stats",link_hit 
This message combines all of a unit's VICE combat statistics, including HP, kills, deaths, and damage dealt.  It is sent by the main sensor script whenever combat is initialized or any of the statistics have changed. 

vice_stats is a combination of all the combat statistics.  To be concise:
vice_stats=(kills&63)<<26 | (deaths&63)<<20 | (hits&4095)<<8 | hp&255
This means that the maximum number of kills/deaths is 63 each,  hits (damage dealt to other combatants) goes up to a maximum possible of 4095, and HP can go all the way up to 4095.  By combining the stats, I believe that overall lag can be reduced, since any script interested in the combat statistics (like a HUD) only has to check for a single link message string.  Here is how you can extract the individual statistics from vice_stats:
vice_kills = (vice_stats>>26)&63;
vice_deaths = (vice_stats>>20)&63;
vice_hits = (vice_stats>>8)&4095;
vice_hp = vice_stats&255;

link_hit indicates the link that an incoming bullet collided with whenever HP has decreased.  For splash damage (bombs etc) link_hit="-1" (LINK_SET).  Otherwise, link_hit ranges from "1"~"255" to indicate that link 1~255 was hit, respectively. The  link_hit information can be used to generate zone-based damage effects.  For example, if an airplane's wing is shot, the sensor will inform you that the airplane's wing prim was hit, and you can program the wing to billow smoke, break off in reaction to this message.  Alternatively, you can choose to ignore link_hit completely.  For any "vice stats" message that wasn't triggerd by a loss of HP, link_hit="".


* team,"vice team" ,"" 
Sent by the vehicle/weapon's control script to select a VICE team.  team=0 indicates "no team" and team=1~4 selects one of the 4 possible VICE teams.  On the default combat channel, friendly fire from bullets is disabled; i.e. two people on team 1 cannot hurt each other with bullets, although everybody receives bomb damage regardless of team. Combat channels whose passwords are prefixed with "ff" allow friendly fire from bullets.  Killing somebody on the same team results in a -2 kills penalty for your avatar.


*  0, "death message",death_message
Sent by the vehicle/weapon's control script to select a message that another avatar will see when they kill you in VICE.  This death message is contained in death_message, and is limited to 30 characters to prevent screen spamming.


*  0,"kamikaze","" 
Sent by the vehicle/weapon's control script to enable VICE kamikaze mode.  Note that at the time of this writing, only ALA, AMA, AHA, and BLA support kamikaze attacks.  When kamikaze mode is enabled, your vehicle essentially becomes a  bomb that detonates on collision with any object (except for VICE bullets) or the ground.  Presently, kamikaze mode is only allowed for all aircraft classes and for the small boat class.  Once kamikaze mode is enabled, the only way to escape it is to crash.


* crash_code, "crash", killer_id
Sent by the VICE sensor script to indicate crashing/death or regeneration.  killer_key is the UUID of the avatar who killed you.
crash_code numbers are as follows:
        0: uncrash (unit has regenerated)
        1: TCS-initiated crash
        2: Unused
        3+: VICE-initiated crash
                3: death by SCG
                4: death by LMG
                5: death by HMG
                6: death by CAN
                7: death by SMG
                8: death by SSG
                9: death by MLE
                10: death by CMG
                13: death by SMB
                14: death by MDB
                15: death by LGB
                16: death by TRP
                17: death by KMK
                18: death by CMB


* 0, "crash collide", ""
Sent by the VICE sensor script when your ALA, AMA, AHA, or BLA collides with an object or the ground after crashing.  This is useful for a "crash effect" in aircraft, such as creating explosion particles.  Note that any scripted child prims (regardless of whether they have a collision() event or not) _must_ have llPassCollisions(TRUE); set in the child prim's script, or else ground collisions to those prims will fail.


* channel_type, "channel",channel_password 
Sent by the vehicle/weapon control script to set the VICE combat channel.  channel_type=0 resets VICE to use the default combat channel;  channel_type=1 indicates that a private combat channel will be used.  When using a private channel, channel_password is the password used to access the channel.  Channels whose passwords are prefixed with "ff" allow friendly fire; otherwise friendly fire from bullets is disabled.


3 ======================= Bullet-related messages


* gun_fire, "gun ctrl" ,rez_offsets 
Sent by the vehicle/weapon's control script to control the guns.  gun_fire=0 ceases fire; any other integer initiates fire.  Note that many of the heavier weapon types (LMG, HMG, CAN) only allow firing when the gunner is seated on an object.

rez_offsets is ignored by any bullet rezzers operating in full-auto mode. When firing in semi-auto mode, it can be used to create a custom rez position offset and rotation from the default.  rez_offsets is parsed as a string with 2 comma-separated values: rez_pos_offset and rez_rot_offset.  A typical value for rez_offsets might be "<2.3,-0.38,-0.2>,<0.0,0.0,0.0,1.0>", with rez_pos_offset=<2.3,-0.38,-0.2>  and rez_rot_offset=<0.0,0.0,0.0,1.0> (zero rotation).  In this case, the bullet would fire in the default direction but have a different rez offset position than default.  <2.3,-0.38,-0.2>  (which is used by the SSG test gun) might be a good rez offset value for a kneeling infantryman.


* overheat_state, "overheat", ""    
Sent by a VICE bullet rezzer script to indicate the overheating state.  overheat_state=1 when your gun has overheated and is unable to fire, and overheat_state=0 indicates that the gun has cooled enough that it is ready to fire again.  Only HMG and LMG types overheat.  This message is only sent by 1 gun in the linkset, to minimize chatter.


* reload_state,  "reload", "" 
Sent by the VICE bullet rezzer script with reload_state=0 to indicate that ammunition is depleted, and reload_state=1 to indicate that reloading has completed.  This message is sent from the weapon's control script to the bullet rezzer with reload_state=2 to reload the gun.  Only SCG and SMG bullet types need to be reloaded manually; SSG and CAN rezzers automatically reload after firing a round, and will send a "reload" message with reload_state=1 to indicate that the can may be fired again.  Bombs inform about reloading using the "bomb" link message.


* bullet_type, "bullet type", ""
This message is sent by the control script to toggle SMG and SCG guns between semi-auto and full-auto firing modes. bullet_type=0 selects semi-auto, and bullet_type=1 selects full auto.  Semi-auto allows for higher accuracy and more gradual ammo depletion, while full-auto allows a higher firing rate.  The maximum firing rate in semi-auto mode for both SMG and SCG bullet rezzers is 1 round per 600ms (1.6666rounds/s).  HMG, LMG, SSG, and CAN all ignore this link message, since they only support 1 firing mode.

* 0,"stab",""
This message is sent by the control script in a non-LMG infantry weapon to the bullet rezzer script.  It triggers the bullet rezzer script to create a melee (MLE) "bullet", which will hit any avatar directly in front of the attacking avatar (a range of 0~1.2m).  MLE attacks have a built-in "recovery time" following each attack, during which the attacking avatar cannot shoot his gun or initiate another melee attack.  This "stab" message is ignored by the bullet rezzer if you are currently firing in full-auto mode (so you must cease fire first).  However, you may launch a melee attack while reloading your gun, but in that case the reloading process is reset (as if reloading started from scratch).

4 ======================= Bomb-related messages

The VICE bomb rezzer is able to rez either VICE-enabled bombs or non-VICE bombs.  The bomb loadout is configured in the "VICE Bomb Config" notecard, specifying bomb names, rez position offset, rez rotation offset, and rez velocity offset.  Bombs are grouped into payloads of up 4 bombs, which may be toggled between.  A single payload's size is limited by the number and type of VICE bombs present within it; different unit types have different "bomb capacities" which limits the total "weight" of bombs available to carry in a given payload.  Since each payload has a fixed number of 4 slots, you must fill empty slots with "NULL" bombs, which are ignored by the rezzer.


* bomb_control, "bomb",""
This message is sent to the bomb rezzing script with bomb_control>=0 when dropping a bomb, and it is sent from the bomb rezzing script with bomb_control<0 to indicate that the bomb rezzer has reloaded and is able to drop another bomb.  bomb_control=0 indicates that the rezzer should drop all available bomb types in the current bomb payload, while bomb_control=1, 2, 3, or 4 instructs the bomb rezzer to drop that certain bomb type in the current payload.  The negative value (bomb_control= -1, -2, -3, 4) is sent from the bomb rezzer to indicate that a bomb type has reloaded and is able to be used again.  The reloading time for all bombs, regardless of unit type, is 10s.


* bomb_type,  "bomb type",""
Sent by the vehicle/weapon control script to the bomb rezzer script to select another bomb payload set.  if bomb_type=0, the bomb rezzer script will select the next loadout of available bombs.  For nonzero values bomb_type=N, bomb payload set N will be activated.  Note that changing the bomb payload causes a 10s delay before the new payload set can be used.


* 0, "explode", ""
Sent by a script inside a bomb to the "VICE Bomb" script, triggering the bomb to detonate with VICE.  This message is usually triggered by either a collision or timer event, although many other trigger conditions are possible.  Note that the VICE bomb won't react if the bomb is an above-water type (SMB/MDB/LGB) and the bomb has detonated underwater, or if the bomb is a TRP and has detonated above water.


5 ======================= Messages related to TCS

Note that as of v1.2.0, the TCS sensor script is integrated into the VICE sensor script for unit types that support TCS.  This combined script replaces the addon script that previous versions had.


* tcs_on, "tcs ctrl", ""
Sent by the vehicle/weapon's control script to toggle TCS on/off.  tcs_on=0 disables TCS; any other integer enables TCS


* tcs_stats,"tcs stats", ""
Sent by the TCS/CCC addon script to indicate TCS stats.  Message format is the same as the "vice stats" message, except that link_hit is always "", due to the limitations of sensor-based combat.


6 ======================= Messages for Observer script

The Observer script is designed to be used in devices like scoreboards, passively listening to the combat events and reporting when a player joins combat, changes team, or gets killed by another player.  The observer then reports these changes via link messages:


* team_number,"join",gunner_id 
Sent by the observer script to inform that a player with key gunner_id has joined the game, and is on team team_number


* team_number,"exit",gunner_id 
Sent by the observer script to inform that a player with key gunner_id has exited the game, and was on team team_number


* team_number,"team",gunner_id
Sent by the observer script to inform that a player with key gunner_id switched teams to join team team_number



* channel_type, "channel",channel_password
Sent by the vehicle/weapon control script to the observer script, to set the VICE combat channel.  This syntax is the same as the "channel" link message for normal sensor scripts (see above)


* vice_on, "vice ctrl", "" 
Sent by the vehicle/weapon's control script to toggle the observer script on or off.  vice_on=0 closes the listen socket; any other integer enables the listener.  Note that a "seated" link message isn't necessary for the observer script, because it's not associated with any particular avatar in combat.


* kill_number,victim_id,attacker_id 
Sent by the observer script to inform that a player with key victim_id has been killed by a player with key attacker_id.  kill_number  contains the following information:
prefix =125822   (18 bits; for identifying the message as a vice observer message)
victim_unit_type (4 bits)
victim_team (3 bits)
attacker_team (3 bits)
attacker_weapon_type (4 bits)

kills_number  =  prefix<<14 | victim_unit_type<<10 | victim_team<<7 | attacker_team<<4 | attacker_weapon_type

The following  code sample will extract all useful information from the link message:
link_message(integer sender_num, integer num, string str, key id)
{
    if(num>>14 == 125822)   // this is a vice observer type message, probably
    {
        integer victim_unit_type=(num>>10)&15;
        integer victim_team=(num>>7)&7;
        integer attacker_team=(num>>4)&7;
        integer attacker_unit_type=num&15;
        key attacker_key=id;
        key victim_key=(key)str;
    }
}

victim_unit_type is coded as follows:
0:  INF
1:  ALA
2:  AMA
3:  AHA
4:  TLA
5: TMA
6:  THA
7:  BLA
8:  BHA
9: LFG
10: MFG
11: BMA
12: MFG

attacker_weapon_type is coded as follows:
0:  SCG
1:  LMG
2:  HMG
3:  CAN
4:  SMG
5:  SSG
6:  MEL
7:  CMG
10: SMB
11: MDB
12: LGB
13: TRP
14: KMK
15: CMB


7 ======================= Messages for Target script

A VICE target is an object which can be damaged with VICE, but is not associated with any particular avatar.  Examples of potential VICE targets include walls, bridges, barrels, crates, etc.  A player is not given credit for destroying a target within VICE itself, but it is possible to make a game using the VICE framework which utilizes these targets (like a team-based game of "destroy the enemy's base").  The following link messages are exactly the same as they are for a normal VICE sensor; I list them here merely to illustrate which ones are available:

* vice_on, "vice ctrl", "" 
* channel_type, "channel",channel_password    
* team,"vice team" ,""
* crash_code, "crash", killer_id


* vice_stats,"vice stats",link_hit  
Like the "vice stats" message in a normal sensor script, this link message informs you about the target's combat statistics.  Unlike a normal unit, a target will always have 0 kills and 0 hits.  This leaves a certain empty space in the vice_stats field.  However, I've redefined vice_stats slightly to take advantage of these unused bits, because it's quite conceivable that a VICE target might have much more than 255HP (which is the limit for the normal type of "vice stats" message). For the target sensor:
vice_stats=(deaths&4095)<<20 | hp&1048575
Thus, given vice_stats, you can find vice_deaths and vice_hp by:
vice_deaths=(num>>20)&4095;
vice_hp=num&1048575;
Thus, a target sensor can have over 1 million HP without the VICE statistics message becoming ambiguous.  link_hit is exactly the same for target sensors as it is for other unit sensors.

* team,"vice team" ,""
Unlike normal sensors, a VICE target will _not_ take any damage from teammates' bombs and other splash damage unless friendly-fire is enabled.

To configure a VICE target, edit the "VICE Target Config" notecard to specify initial HP and damage profile.


8 ======================= Changelog

v1.2.0 4/2/09
    -Media change: Graphics: New logo (VICE roundel)
    -Media change: Documentation: Notecards now act as an index with links to web
        - Documentation updates will primarily be performed on the website
        - Easier to read/navigate
    -System change: New weapon type: CMG (compact machine gun)
        - primarily for infantry (but can be used as an LMG substitute in vehicles with weaker guns, e.g. a Lewis Gun)
        - lower calibre than LMG, so it does less damage against vehicles (but still kills infantry instantly)
    -System change: New weapon type: CMB (compact bomb)
        - new bomb type, weaker than other types
        - used for hand grenades and small rockets
        - weight of 1 (half of SMB)
        - is now the bomb for infantry to use
    -System change: Customized HP support
        - for all unit types
        - downward from the defaults only (sorry, cheaters!)
        - Limited in range so that unit type HP ranges don't overlap (e.g. AMA can be set to 101~150HP)
        - Configurable by adding "vicehp=xxx" anywhere in the root prim's description
        - HP setting takes effect at rez time
        - TCS HP scales in proportion to VICE HP
    -System change: removed CCC support
        - nobody who uses VICE appears to be playing with CCC; TCS is the sensor combat system of choice
        - The CCC part of the TCS/CCC addon script has been removed
    -System change: players' HP (and total HP) is now broadcasted when a player enters or leaves combat
        - "Creem Pye (v1.2, No Team, ALA, 100/100HP) has joined the fray" is the style when joining
        - "Creem Pye (v1.2, No Team, ALA, 34/100HP) has exited combat" is the style when a player exits
        - useful for displaying customized HP and also for pointing out cowards
    -System change: Added a version check when other units announce their version, to warn the user that they're out of date
    -System change: Added dummy damage values for "unknown" weapons
        -Very high damage values (9999) for unknown weapon types
        -Call unknown weapons "UNK"
        -Will provide better forward compatibility in case a weapon is added later, to avoid incompatible updates
    -System change: Improve bomb loadout description
        - Usually a bomb loadout with duplicate bombs would list the full bomb name multiple times, e.g.:
            "Bomb Loadout 1: VICE SMB Hurricane, VICE SMB Hurricane"
        - The improved format is:
            "Bomb Loadout 1: (2) VICE SMB Hurricane"
        - Single bombs still appear the same:
            "Bomb Loadout 1: VICE MDB German 250KG"
    -Weapon change: refactored bomb damage calculations
        - old way was to scale bomb damage by distance^3 (damage was a bit too localized in practice)
        - new way is to scale bomb damage by distance^2
        - bomb damage numbers have been rescaled to accommodate this new calculation style
    -Weapon change: bombs now work better across region boundaries
        - previously, bombs only worked if the attacker, bomb, and victim were all in the same region
        - the bomb code was rewritten to get around that
        - another side effect is lower latency for bomb damage
    -Weapon change: it is now possible to mix and match weapons in vehicles
        - e.g.  1HMG + 1LMG in ALA
        - only works in cases that wouldn't exceed previous loadout limits (e.g. if a vehicle could have 2HMG, 2LMG, or 1CAN before,  1LMG+1HMG is possible, but 1LMG+1CAN will break the can)
    -Weapon change: it is now possible to have multiple bullet rezzers of the same type in a single prim
        - e.g. an airplane can have 2 LMGs in the same nose prim
    -Weapon change: lowered HMG rate of fire
        - HMGs were just a bit too deadly and were abused (used in guns they don't belong in)
        - rate of fire is now lower, although the damage inflicted per bullet is about the same
    -Weapon change: SSG long range bullet
        - new bullet type for SSG
        - 2x the speed of normal bullets (useful for sniping)
        - SSG will retain the old style (short range) bullet as another firing mode
    -Weapon change: faster semi-auto firing rates for SCG and SMG
        - now can fire in semi-auto mode almost up to the rate of full auto
        - accuracy converges to the full-auto's accuracy when firing in semi-auto rapidly
    -Weapon change: bomb naming format is more compact
        - old bomb naming prefixes were "VICE SM Bomb" etc.
        - new bomb naming prefixes are "VICE SMB" etc. (2nd part is the weapon type acronym)
    -Weapon change: bullets are more visible now
        - 2x as fat and fullbright colors
    -Weapon change: CAN bullet is now "full speed"
        - previously it was ~70% of the speed of other bullet types
        - now it is the same speed as other bullet types
    -Weapon change: modify TCS sensor arc width
        - some hecklers claimed that my TCS arc was too narrow, as part of some conspiracy, so I investigated
        - old arc was 0.9% _wider_ (at 0.1585) than Cubey's script, according to precise measurements
        - new arc width is 0.1570796
    -Weapon change: lowered minimum effective range for infantry guns (SCG, SMG, SSG)
        - bullets now do damage at nearly point blank range
    -Bugfix: The rare double-death announcement on crash appears to be fixed
        - this can happen when 2 bullets hit a vehicle at exactly the same time when the HP is low 
    -Bugfix: Fixed mislabeling of KMK as SMB in some cases
        
v1.1.2b 9/14/08
    -Package change:    Added TCS and CCC support to the example airplane. Also added a VICE bomb.
    -Package change:    Added tips to the examples to encourage  developers to explore the full-permission scripts.
    
v1.1.2a 9/14/08
    -Package fix:  Set the RPG rocket in the "SMB Test Gun" as a temporary object (bombs should always be temporary in case they don't explode!)
    
v1.1.2 8/29/08
    -System change: All non-bullet scripts are now compiled as Mono for better performance
    -Bugfix: The VICE Target script now checks for matching query IDs in the dataserver event
    -Bugfix: Fixed "VICE Targets  crippled after more than 1 day of operation"
    -Bugfix: Removed extra "user has exited combat / user has joined combat" messages  for combat sensors dedicated to a private combat channel
    -Package addition:Added "VICE Test Observer Egg" : A simple combat announcer, which uses the VICE observer script  to announce the deaths of players
    
v1.1.1  7/3/08
    -Package addition: Placed the "VICE MLE Bullet" object in the infantry package and the "VICE Bomb" script in all packages. These missing pieces were already in the example weapons, but it's better to have them in the main packages. 


v1.1.0   6/30/08
    -Bugfix: changed the sensor script to detect multiple bullet collisions per sim frame (~22ms)
    -Bugfix:  set minimum kills stat as 0 (to prevent a teammate kill from triggering a -2 -> 62 kills stat rollover)
    -Bugfix: Fixed non-zero bomb rez offset rotations
    -Bugfix: Fixed an off-by-one bug for multi-payload bomb selection (Thanks Julian!)
    -System change:  Added a new weapon class for infantry melee attacks: MLE
            -Only available to infantry
            -Consists of a zero-velocity invisible "bullet", 60cm in diameter
            -Causes 10HP loss to INF when hit (other units cannot be damaged by it)
            -Range: 0~1.2m between the attacker and victim
            -Maximum 'firing rate': once per 1.5s
            -Can be interpreted as a rifle butt to the head, a knife stab, a sword slash, etc
            -Attack triggered by "stab" link message (see scripting guide or infantry test guns for details)
            -May attack with MLE while reloading; however, this will reset your reload timer
    -System change: Removed 'overheat' sound from LMG and HMG bullet rezzer scripts, to allow for better custom overheat sounds
    -System change: Changed some weapon damage stats (notice changes in LMG and HMG against ALA and AMA from previous versions)
    -System change: Changed some weapon loadout stats, including CAN in more units
    -System change: Increased the arc width of the TCS addon sensor by ~3%, to better match the original TCS performance
    -Package addition: added a freebie VICE-enabled airplane (ALA) to the test weapons kit (Thanks Xenox!)
    -Package addition: added a freebie VICE-enabled scimitar (MLE) for infantry to the test weapons kit
    -Package addition: included new unit sensor scripts:
            TLA
            TMA
            THA
            BLA
            BMA
            BHA
            LFG
            MFG
            HFG   
    
            
v1.0.0rc3      3/27/08
    -Changed the "VICE Listener" script name to "VICE Observer" to disambiguate its purpose
    -Fleshed out the scripting guide a bit more


v1.0.0rc2      3/26/08
    -Added documentation, including this notecard
    -Fixed a permissions problem with the scoreboard.  The SDK package  is now 100% copyable and transferable
    -Fixed a bug with SCG and SMG bullet rezzers in which the  gun cannot rez any bullets if the avatar died while reloading (SCG & SMG scripts are  now v1.0.1)


v1.0.0rc1     3/22/08
    -Initial release
    

===============================

For more examples, please see the infantry test guns or the test target, which are included with the SDK.  If you've read this document and need more help, feel free to send a message to the VICE Users Group:   secondlife:///app/group/303081e4-0a49-ff5c-33e5-5ee041ee25e8/about
Also stay tuned to http://vicecombat.com for news and updates.